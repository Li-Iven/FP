несколько пересечений
(setq l (list (make-instance 'line
           :start (make-instance 'cart :x 0 :y 0)
           :end (make-instance 'cart :x 2 :y 2))
                      (make-instance 'line
           :start (make-instance 'cart :x 1 :y 0)
           :end (make-instance 'cart :x 1 :y 2))
	(make-instance 'line
           :start (make-instance 'cart :x 0 :y 2)
           :end (make-instance 'cart :x 2 :y 2))))

проверка неповторяемости ответов
(setq l (list (make-instance 'line
           :start (make-instance 'cart :x 0 :y 0)
           :end (make-instance 'cart :x 2 :y 2))
                      (make-instance 'line
           :start (make-instance 'cart :x 0 :y 2)
           :end (make-instance 'cart :x 2 :y 0))
	(make-instance 'line
           :start (make-instance 'cart :x 1 :y 0)
           :end (make-instance 'cart :x 1 :y 2))))

проверка считываетмости полярных координат
(setq l (list (make-instance 'line
           :start (make-instance 'cart :x 2 :y 0)
           :end (make-instance 'cart :x 0 :y 2))
                    (make-instance 'line
           :start (make-instance 'cart :x 1 :y 0)
           :end (make-instance 'cart :x 1 :y 2))
                      (make-instance 'line
           :start (make-instance 'polar :radius 0 :angle 0)
           :end (make-instance 'polar :radius 5 :angle (/ pi 4)))))

(setq p (make-instance 'cart :x 4 :y 3))
(setq u (make-instance 'polar :radius 5 :angle (/ pi 6)))

проверка мнимого пересечения продолжений отрезков
(setq l (list (make-instance 'line
           :start (make-instance 'cart :x 0 :y 0)
           :end (make-instance 'cart :x 2 :y 2))
                      (make-instance 'line
           :start (make-instance 'cart :x -2 :y 1)
           :end (make-instance 'cart :x 0 :y 1))))


(line-intersections l)

(line-intersections '(0 1 2 3))
